[
  {
    "objectID": "vscode.html",
    "href": "vscode.html",
    "title": "Visual Studio Code Cheatsheet",
    "section": "",
    "text": "1 Visual Studio Code Layout\nThe following is a brief overview of the VS Code layout. For more information, see the VS Code documentation.\n\nTitle Bar: The top-most bar that displays the name of the currently open file or folder and the VS Code application control buttons (minimize, maximize, close) depending on the operating system.\nMenu Bar: Below the Title Bar, with options like File, Edit, View, Go, Debug, Terminal, and Help.\nActivity Bar: Vertically aligned to the left, it contains icons for Explorer, Search, Source Control, Run, and Extensions.\nSide Bar: To the right of the Activity Bar. Displays different content based on the selected option in the Activity Bar. The Explorer in the Side Bar shows the file directory.\nEditor Area: The large central area where files can be viewed and edited.\nStatus Bar: At the very bottom, showing information about the opened project and the state of VS Code. Includes items like Git branch, errors and warnings, and the details of the opened file.\nPanels: Located at the bottom, but can be toggled to the right side. These display different types of information like Problems, Output, Debug Console, and Terminal. Panels and the Editor Area can be resized horizontally.\n\nNote: VS Code is highly customizable, so users can change the layout to suit their needs.\n\n\n2 Visual Studio Code Keyboard Shortcuts\nFor Windows/Linux Users:\n\nFile Navigation and Management:\n\nCtrl + P: Quick Open, Go to File…\nCtrl + W: Close current file\nCtrl + Shift + T: Reopen closed file\nCtrl + Tab: Navigate through recently used files\nCtrl + Shift + E: Show Explorer / Toggle focus\n\nSearch:\n\nCtrl + F: Find\nCtrl + H: Replace\nCtrl + Shift + F: Find in files\n\nEditing:\n\nCtrl + X: Cut line (empty selection)\nCtrl + C: Copy line (empty selection)\nCtrl + V: Paste\nCtrl + /: Toggle line comment\nCtrl + Shift + /: Toggle block comment\nAlt + Up / Down: Move line up/down\nShift + Alt + Up / Down: Copy line up/down\nCtrl + Space: Trigger suggestion\n\nView:\n\nCtrl + B: Toggle Sidebar visibility\nCtrl + Shift + E: Show Explorer\nCtrl + Shift + G: Show Source Control\nCtrl + Shift + D: Show Run\nCtrl + Shift + X: Show Extensions\n\nIntegrated Terminal:\n\nCtrl + `: Show integrated terminal\nCtrl + Shift +: Create new terminal\n\nDebugging:\n\nF5: Start/Continue\nShift + F5: Stop\nF9: Toggle breakpoint\n\n\nFor Mac Users:\n\nFile Navigation and Management:\n\nCmd + P: Quick Open, Go to File…\nCmd + W: Close current file\nCmd + Shift + T: Reopen closed file\nCmd + Tab: Navigate through recently used files\nCmd + Shift + E: Show Explorer / Toggle focus\n\nSearch:\n\nCmd + F: Find\nCmd + H: Replace\nCmd + Shift + F: Find in files\n\nEditing:\n\nCmd + X: Cut line (empty selection)\nCmd + C: Copy line (empty selection)\nCmd + V: Paste\nCmd + /: Toggle line comment\nCmd + Shift + /: Toggle block comment\nOption + Up / Down: Move line up/down\nShift + Option + Up / Down: Copy line up/down\nCmd + Space: Trigger suggestion\n\nView:\n\nCmd + B: Toggle Sidebar visibility\nCmd + Shift + E: Show Explorer\nCmd + Shift + G: Show Source Control\nCmd + Shift + D: Show Run\nCmd + Shift + X: Show Extensions\n\nIntegrated Terminal:\n\nCtrl + `: Show integrated terminal\nCtrl + Shift +: Create new terminal\n\nDebugging:\n\nFn + F5: Start/Continue\nShift + Fn + F5: Stop\nFn + F9: Toggle breakpoint\n\n\nNote: These are default shortcuts and they can be customized according to the user’s preferences."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "a11y_ds",
    "section": "",
    "text": "This website is a collection of resources for learning about accessible data science. It is a work in progress, and contributions are welcome!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Accessible data science is a project to make data science more accessible to everyone. We do this by creating a community of people who are interested in data science and by creating resources that help people learn data science."
  },
  {
    "objectID": "installation_r_vscode.html",
    "href": "installation_r_vscode.html",
    "title": "Installation Guide for R and Visual Studio Code for Screen Reader Users",
    "section": "",
    "text": "This section describes how to install R, Visual Studio Code, and other related dependencies. The following instructions are tested on Windows 10 and Mac OS.\n\n\n\nPress Windows+R and type “cmd” without the quotes. After typing, don’t hit Enter. Instead, press Ctrl+Shift+Enter to run the command prompt as administrator privilege. If you are prompted for an administrator password or confirmation, type the password or provide confirmation.\nCopy and paste the following command into the command prompt and press enter. This will install chocolatey, a package manager for Windows. Note that there is copy button below the command. You can click the copy button to copy the command. To paste the command into the command prompt, you can press Ctrl+V.\n\n\n@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n\n\nCopy and paste the following command into the opened command prompt and press enter. This will install R, VSCode and other related dependencies. Grab a cup of coffee and wait for the installation to finish. It may take a while. You will hear a “do mi sol” beep sound when the installation is completed. If it fails to install, you will hear a “do do do” beep sound. If you hear the “do do do” beep sound, you can try to run the command again.\n\n\npowershell -Command \"& { $sapi = New-Object -ComObject SAPI.SpVoice; $sapi.Rate = 10; $packages = @('tinytex', 'pandoc', 'quarto', 'rtools', 'r.project', 'vscode'); $executables = @('tlmgr', 'pandoc', 'quarto', '', 'R', 'code'); $installPackages = @(); $installedPackages = @(); foreach ($package in $packages) { $index = $packages.IndexOf($package); if ($package -eq 'rtools') { if ([Environment]::GetEnvironmentVariable('RTOOLS43_HOME', 'User') -eq $null -and [Environment]::GetEnvironmentVariable('RTOOLS43_HOME', 'Machine') -eq $null) { $installPackages += $package } else { $installedPackages += $package } } else { if ((Get-Command $executables[$index] -ErrorAction SilentlyContinue) -eq $null) { $installPackages += $package } else { $installedPackages += $package } } }; if ($installedPackages.Count -gt 0) { [console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(329, 100); Start-Sleep -Milliseconds 100; [console]::beep(392, 100); $sapi.Speak('The following packages are already installed: ' + ($installedPackages -join ', ')) }; if ($installPackages.Count -gt 0) { [console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(329, 100); Start-Sleep -Milliseconds 100; [console]::beep(392, 100); $sapi.Speak('The following packages will be installed: ' + ($installPackages -join ', ')); choco install $installPackages -y }; if($installedPackages.Count -eq 0 -and $installPackages.Count -eq 0) {[console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(329, 100); Start-Sleep -Milliseconds 100; [console]::beep(392, 100); $sapi.Speak('All packages are already installed.')} }\"\n\n\nAfter installation, type the following in the opened command prompt and hit enter key. This will add R to your path environment variable. You will hear a “do mi sol” beep sound when the installation is completed. If it fails to install, you will hear a “do do do” beep sound. If you hear the “do do do” beep sound, you can try to run the command again.\n\n\npowershell -Command \"& { $sapi = New-Object -ComObject SAPI.SpVoice; $sapi.Rate = 10; try { $RInstalls = Get-ChildItem 'C:\\Program Files\\R' -Directory; $LatestR = $RInstalls | Sort-Object LastWriteTime -Descending | Select-Object -First 1; $RBinPath = Join-Path -Path $LatestR.FullName -ChildPath 'bin\\x64'; $RSetRegPath = Join-Path -Path $LatestR.FullName -ChildPath 'bin\\x64\\RSetReg.exe'; & $RSetRegPath; $UserPath = [Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::User); $SystemPath = [Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::Machine); if (($UserPath -split ';' -notcontains $RBinPath) -and ($SystemPath -split ';' -notcontains $RBinPath)) { $NewPath = $UserPath + ';' + $RBinPath; [Environment]::SetEnvironmentVariable('Path', $NewPath, [System.EnvironmentVariableTarget]::User) }; [console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(329, 100); Start-Sleep -Milliseconds 100; [console]::beep(392, 100); $sapi.Speak('Process Completed Successfully') } catch { [console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(261, 100); $sapi.Speak('An Error Occurred During Execution') }}\"\n\n\nClose the command prompt by pressing Alt+F4 key.\nPress Windows+R and type “cmd” without the quotes. After typing, don’t hit Enter. Instead, press Ctrl+Shift+Enter to run the command prompt as administrator privilege. If you are prompted for an administrator password or confirmation, type the password or provide confirmation.\nIn the opened command prompt, copy and paste the following command and press enter. This will install R packages that are required for VSCode.\n\n\n@refreshenv && Rscript -e \"packages &lt;- c('languageserver', 'lintr', 'httpgd', 'DT', 'beepr', 'devtools'); installed_packages &lt;- rownames(installed.packages()); packages_to_install &lt;- setdiff(packages, installed_packages); if(length(packages_to_install) &gt; 0) { install.packages(packages_to_install, repos = 'https://cloud.r-project.org/') }; if(!'vscDebugger' %in% installed_packages) { if(!require(remotes)) { install.packages('remotes', repos = 'https://cloud.r-project.org/') }; remotes::install_github('ManuelHentschel/vscDebugger') }\"\n\n\nThe following is optional. However, I recommend you to install the latest version of PowerShell to benefit from VSCode shell integration feature. You can copy and paste the following command into the opened command prompt and press enter. Note that the default PowerShell version on Windows 10 is 5.1. The following command will install PowerShell 7 or above.\n\n\nwinget install Microsoft.PowerShell\n\n\nGo to Section 2, to complete the remaining steps.\n\n\n\n\nThe following assumes that you have installed Homebrew on your system. If you haven’t installed Homebrew, you can install it by following the instruction described in the Homebrew website.\n\nOpen terminal by pressing Command+Space and type “terminal” without the quotes. Press enter to open the terminal.\nCopy and paste the following command into the terminal and press enter. Note that there is copy button below the command. You can click the copy button to copy the command. To paste the command into the command prompt, you can press CMD+V. Some commands may require you to enter your password. If so, you will be prompted to enter your password. You will not see any characters when you type your password. Just type your password and press enter.\n\n\n#  Install R\nbrew install r\n\n# Install Pandoc\nbrew install pandoc\n\n# Install Quarto\nbrew install quarto\n\n# Install VSCode\nbrew install --cask visual-studio-code\n\n# Install xcode command line tools\nxcode-select --install\n\n# Install TinyTeX\nquarto install tinytex\n\n\nIn the terminal, copy and paste the following command and press enter. This will install R packages that are required for VSCode.\n\n\nRscript -e 'packages &lt;- c(\"languageserver\", \"lintr\", \"httpgd\", \"DT\", \"beepr\", \"devtools\"); installed_packages &lt;- rownames(installed.packages()); packages_to_install &lt;- setdiff(packages, installed_packages); if(length(packages_to_install) &gt; 0) { install.packages(packages_to_install, repos = \"https://cloud.r-project.org/\") }; if(!\"vscDebugger\" %in% installed_packages) { if(!require(remotes)) { install.packages(\"remotes\", repos = \"https://cloud.r-project.org/\") }; remotes::install_github(\"ManuelHentschel/vscDebugger\") }'\n\n\nGo to Section 2, to complete the remaining steps."
  },
  {
    "objectID": "installation_r_vscode.html#windows",
    "href": "installation_r_vscode.html#windows",
    "title": "Installation Guide for R and Visual Studio Code for Screen Reader Users",
    "section": "",
    "text": "Press Windows+R and type “cmd” without the quotes. After typing, don’t hit Enter. Instead, press Ctrl+Shift+Enter to run the command prompt as administrator privilege. If you are prompted for an administrator password or confirmation, type the password or provide confirmation.\nCopy and paste the following command into the command prompt and press enter. This will install chocolatey, a package manager for Windows. Note that there is copy button below the command. You can click the copy button to copy the command. To paste the command into the command prompt, you can press Ctrl+V.\n\n\n@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n\n\nCopy and paste the following command into the opened command prompt and press enter. This will install R, VSCode and other related dependencies. Grab a cup of coffee and wait for the installation to finish. It may take a while. You will hear a “do mi sol” beep sound when the installation is completed. If it fails to install, you will hear a “do do do” beep sound. If you hear the “do do do” beep sound, you can try to run the command again.\n\n\npowershell -Command \"& { $sapi = New-Object -ComObject SAPI.SpVoice; $sapi.Rate = 10; $packages = @('tinytex', 'pandoc', 'quarto', 'rtools', 'r.project', 'vscode'); $executables = @('tlmgr', 'pandoc', 'quarto', '', 'R', 'code'); $installPackages = @(); $installedPackages = @(); foreach ($package in $packages) { $index = $packages.IndexOf($package); if ($package -eq 'rtools') { if ([Environment]::GetEnvironmentVariable('RTOOLS43_HOME', 'User') -eq $null -and [Environment]::GetEnvironmentVariable('RTOOLS43_HOME', 'Machine') -eq $null) { $installPackages += $package } else { $installedPackages += $package } } else { if ((Get-Command $executables[$index] -ErrorAction SilentlyContinue) -eq $null) { $installPackages += $package } else { $installedPackages += $package } } }; if ($installedPackages.Count -gt 0) { [console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(329, 100); Start-Sleep -Milliseconds 100; [console]::beep(392, 100); $sapi.Speak('The following packages are already installed: ' + ($installedPackages -join ', ')) }; if ($installPackages.Count -gt 0) { [console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(329, 100); Start-Sleep -Milliseconds 100; [console]::beep(392, 100); $sapi.Speak('The following packages will be installed: ' + ($installPackages -join ', ')); choco install $installPackages -y }; if($installedPackages.Count -eq 0 -and $installPackages.Count -eq 0) {[console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(329, 100); Start-Sleep -Milliseconds 100; [console]::beep(392, 100); $sapi.Speak('All packages are already installed.')} }\"\n\n\nAfter installation, type the following in the opened command prompt and hit enter key. This will add R to your path environment variable. You will hear a “do mi sol” beep sound when the installation is completed. If it fails to install, you will hear a “do do do” beep sound. If you hear the “do do do” beep sound, you can try to run the command again.\n\n\npowershell -Command \"& { $sapi = New-Object -ComObject SAPI.SpVoice; $sapi.Rate = 10; try { $RInstalls = Get-ChildItem 'C:\\Program Files\\R' -Directory; $LatestR = $RInstalls | Sort-Object LastWriteTime -Descending | Select-Object -First 1; $RBinPath = Join-Path -Path $LatestR.FullName -ChildPath 'bin\\x64'; $RSetRegPath = Join-Path -Path $LatestR.FullName -ChildPath 'bin\\x64\\RSetReg.exe'; & $RSetRegPath; $UserPath = [Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::User); $SystemPath = [Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::Machine); if (($UserPath -split ';' -notcontains $RBinPath) -and ($SystemPath -split ';' -notcontains $RBinPath)) { $NewPath = $UserPath + ';' + $RBinPath; [Environment]::SetEnvironmentVariable('Path', $NewPath, [System.EnvironmentVariableTarget]::User) }; [console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(329, 100); Start-Sleep -Milliseconds 100; [console]::beep(392, 100); $sapi.Speak('Process Completed Successfully') } catch { [console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(261, 100); $sapi.Speak('An Error Occurred During Execution') }}\"\n\n\nClose the command prompt by pressing Alt+F4 key.\nPress Windows+R and type “cmd” without the quotes. After typing, don’t hit Enter. Instead, press Ctrl+Shift+Enter to run the command prompt as administrator privilege. If you are prompted for an administrator password or confirmation, type the password or provide confirmation.\nIn the opened command prompt, copy and paste the following command and press enter. This will install R packages that are required for VSCode.\n\n\n@refreshenv && Rscript -e \"packages &lt;- c('languageserver', 'lintr', 'httpgd', 'DT', 'beepr', 'devtools'); installed_packages &lt;- rownames(installed.packages()); packages_to_install &lt;- setdiff(packages, installed_packages); if(length(packages_to_install) &gt; 0) { install.packages(packages_to_install, repos = 'https://cloud.r-project.org/') }; if(!'vscDebugger' %in% installed_packages) { if(!require(remotes)) { install.packages('remotes', repos = 'https://cloud.r-project.org/') }; remotes::install_github('ManuelHentschel/vscDebugger') }\"\n\n\nThe following is optional. However, I recommend you to install the latest version of PowerShell to benefit from VSCode shell integration feature. You can copy and paste the following command into the opened command prompt and press enter. Note that the default PowerShell version on Windows 10 is 5.1. The following command will install PowerShell 7 or above.\n\n\nwinget install Microsoft.PowerShell\n\n\nGo to Section 2, to complete the remaining steps."
  },
  {
    "objectID": "installation_r_vscode.html#mac-os",
    "href": "installation_r_vscode.html#mac-os",
    "title": "Installation Guide for R and Visual Studio Code for Screen Reader Users",
    "section": "",
    "text": "The following assumes that you have installed Homebrew on your system. If you haven’t installed Homebrew, you can install it by following the instruction described in the Homebrew website.\n\nOpen terminal by pressing Command+Space and type “terminal” without the quotes. Press enter to open the terminal.\nCopy and paste the following command into the terminal and press enter. Note that there is copy button below the command. You can click the copy button to copy the command. To paste the command into the command prompt, you can press CMD+V. Some commands may require you to enter your password. If so, you will be prompted to enter your password. You will not see any characters when you type your password. Just type your password and press enter.\n\n\n#  Install R\nbrew install r\n\n# Install Pandoc\nbrew install pandoc\n\n# Install Quarto\nbrew install quarto\n\n# Install VSCode\nbrew install --cask visual-studio-code\n\n# Install xcode command line tools\nxcode-select --install\n\n# Install TinyTeX\nquarto install tinytex\n\n\nIn the terminal, copy and paste the following command and press enter. This will install R packages that are required for VSCode.\n\n\nRscript -e 'packages &lt;- c(\"languageserver\", \"lintr\", \"httpgd\", \"DT\", \"beepr\", \"devtools\"); installed_packages &lt;- rownames(installed.packages()); packages_to_install &lt;- setdiff(packages, installed_packages); if(length(packages_to_install) &gt; 0) { install.packages(packages_to_install, repos = \"https://cloud.r-project.org/\") }; if(!\"vscDebugger\" %in% installed_packages) { if(!require(remotes)) { install.packages(\"remotes\", repos = \"https://cloud.r-project.org/\") }; remotes::install_github(\"ManuelHentschel/vscDebugger\") }'\n\n\nGo to Section 2, to complete the remaining steps."
  }
]