{
  "hash": "bd0f52c0c4b40b1a86fbd00ce14a0564",
  "result": {
    "markdown": "---\ntitle: \"Installation Guide for R and Visual Studio Code for Screen Reader Users\"\nauthor: JooYoung Seo\ndate: \"2023-08-05\"\n---\n\n\n# Install R, Visual Studio Code, and Related Dependencies {#sec-install-r-vscode}\n\nThis section describes how to install R, Visual Studio Code, and other related dependencies. The following instructions are tested on Windows 10 and Mac OS.\n\n## Windows\n\n1. Press `Windows+R` and type \"cmd\" without the quotes. After typing, don't hit `Enter`. Instead, press `Ctrl+Shift+Enter` to run the command prompt as administrator privilege. If you are prompted for an administrator password or confirmation, type the password or provide confirmation.\n\n2. Copy and paste the following command into the command prompt and press enter. This will install chocolatey, a package manager for Windows. Note that there is copy button below the command. You can click the copy button to copy the command. To paste the command into the command prompt, you can press Ctrl+V.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n```\n:::\n\n\n3. Copy and paste the following command into the opened command prompt and press enter. This will install R, VSCode and other related dependencies. Grab a cup of coffee and wait for the installation to finish. It may take a while. You will hear a \"do mi sol\" beep sound when the installation is completed. If it fails to install, you will hear a \"do do do\" beep sound. If you hear the \"do do do\" beep sound, you can try to run the command again.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npowershell -Command \"& { $sapi = New-Object -ComObject SAPI.SpVoice; $sapi.Rate = 10; $packages = @('tinytex', 'pandoc', 'quarto', 'rtools', 'r.project', 'vscode'); $executables = @('tlmgr', 'pandoc', 'quarto', '', 'R', 'code'); $installPackages = @(); $installedPackages = @(); foreach ($package in $packages) { $index = $packages.IndexOf($package); if ($package -eq 'rtools') { if ([Environment]::GetEnvironmentVariable('RTOOLS43_HOME', 'User') -eq $null -and [Environment]::GetEnvironmentVariable('RTOOLS43_HOME', 'Machine') -eq $null) { $installPackages += $package } else { $installedPackages += $package } } else { if ((Get-Command $executables[$index] -ErrorAction SilentlyContinue) -eq $null) { $installPackages += $package } else { $installedPackages += $package } } }; if ($installedPackages.Count -gt 0) { [console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(329, 100); Start-Sleep -Milliseconds 100; [console]::beep(392, 100); $sapi.Speak('The following packages are already installed: ' + ($installedPackages -join ', ')) }; if ($installPackages.Count -gt 0) { [console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(329, 100); Start-Sleep -Milliseconds 100; [console]::beep(392, 100); $sapi.Speak('The following packages will be installed: ' + ($installPackages -join ', ')); choco install $installPackages -y }; if($installedPackages.Count -eq 0 -and $installPackages.Count -eq 0) {[console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(329, 100); Start-Sleep -Milliseconds 100; [console]::beep(392, 100); $sapi.Speak('All packages are already installed.')} }\"\n```\n:::\n\n\n4. After installation, type the following in the opened command prompt and hit enter key. This will add R to your path environment variable. You will hear a \"do mi sol\" beep sound when the installation is completed. If it fails to install, you will hear a \"do do do\" beep sound. If you hear the \"do do do\" beep sound, you can try to run the command again.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npowershell -Command \"& { $sapi = New-Object -ComObject SAPI.SpVoice; $sapi.Rate = 10; try { $RInstalls = Get-ChildItem 'C:\\Program Files\\R' -Directory; $LatestR = $RInstalls | Sort-Object LastWriteTime -Descending | Select-Object -First 1; $RBinPath = Join-Path -Path $LatestR.FullName -ChildPath 'bin\\x64'; $RSetRegPath = Join-Path -Path $LatestR.FullName -ChildPath 'bin\\x64\\RSetReg.exe'; & $RSetRegPath; $UserPath = [Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::User); $SystemPath = [Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::Machine); if (($UserPath -split ';' -notcontains $RBinPath) -and ($SystemPath -split ';' -notcontains $RBinPath)) { $NewPath = $UserPath + ';' + $RBinPath; [Environment]::SetEnvironmentVariable('Path', $NewPath, [System.EnvironmentVariableTarget]::User) }; [console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(329, 100); Start-Sleep -Milliseconds 100; [console]::beep(392, 100); $sapi.Speak('Process Completed Successfully') } catch { [console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(261, 100); Start-Sleep -Milliseconds 100; [console]::beep(261, 100); $sapi.Speak('An Error Occurred During Execution') }}\"\n```\n:::\n\n\n5. Close the command prompt by pressing `Alt+F4` key.\n\n6. Press `Windows+R` and type \"cmd\" without the quotes. After typing, don't hit `Enter`. Instead, press `Ctrl+Shift+Enter` to run the command prompt as administrator privilege. If you are prompted for an administrator password or confirmation, type the password or provide confirmation.\n\n7. In the opened command prompt, copy and paste the following command and press enter. This will install R packages that are required for VSCode.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n@refreshenv && Rscript -e \"packages <- c('languageserver', 'lintr', 'httpgd', 'DT', 'beepr', 'devtools'); installed_packages <- rownames(installed.packages()); packages_to_install <- setdiff(packages, installed_packages); if(length(packages_to_install) > 0) { install.packages(packages_to_install, repos = 'https://cloud.r-project.org/') }; if(!'vscDebugger' %in% installed_packages) { if(!require(remotes)) { install.packages('remotes', repos = 'https://cloud.r-project.org/') }; remotes::install_github('ManuelHentschel/vscDebugger') }\"\n```\n:::\n\n\n8. The following is optional. However, I recommend you to install the latest version of PowerShell to benefit from VSCode shell integration feature. You can copy and paste the following command into the opened command prompt and press enter. Note that the default PowerShell version on Windows 10 is 5.1. The following command will install PowerShell 7 or above.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwinget install Microsoft.PowerShell\n```\n:::\n\n\n9. Go to @sec-vscode-configuration, to complete the remaining steps.\n\n\n## Mac OS\n\nThe following assumes that you have installed Homebrew on your system. If you haven't installed Homebrew, you can install it by following the instruction described in the [Homebrew website](https://brew.sh/){target=\"_blank\"}.\n\n1. Open terminal by pressing `Command+Space` and type \"terminal\" without the quotes. Press enter to open the terminal.\n\n2. Copy and paste the following command into the terminal and press enter. Note that there is copy button below the command. You can click the copy button to copy the command. To paste the command into the command prompt, you can press CMD+V. Some commands may require you to enter your password. If so, you will be prompted to enter your password. You will not see any characters when you type your password. Just type your password and press enter.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#  Install R\nbrew install r\n\n# Install Pandoc\nbrew install pandoc\n\n# Install Quarto\nbrew install quarto\n\n# Install VSCode\nbrew install --cask visual-studio-code\n\n# Install xcode command line tools\nxcode-select --install\n\n# Install TinyTeX\nquarto install tinytex\n```\n:::\n\n\n3. In the terminal, copy and paste the following command and press enter. This will install R packages that are required for VSCode.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nRscript -e 'packages <- c(\"languageserver\", \"lintr\", \"httpgd\", \"DT\", \"beepr\", \"devtools\"); installed_packages <- rownames(installed.packages()); packages_to_install <- setdiff(packages, installed_packages); if(length(packages_to_install) > 0) { install.packages(packages_to_install, repos = \"https://cloud.r-project.org/\") }; if(!\"vscDebugger\" %in% installed_packages) { if(!require(remotes)) { install.packages(\"remotes\", repos = \"https://cloud.r-project.org/\") }; remotes::install_github(\"ManuelHentschel/vscDebugger\") }'\n```\n:::\n\n\n4. Go to @sec-vscode-configuration, to complete the remaining steps.\n\n\n# Visual Studio Code Configuration {#sec-vscode-configuration}\n\nOnce you have installed R and Visual Studio Code following the instruction described in @sec-install-r-vscode, you need to configure VSCode to make it accessible. I have created an accessible VSCode profile for data science work for your convenience. This profile contains a set of keyboard shortcuts, settings, and extensions that are useful for screen reader users when working with R and Python. You can apply this profile by following the steps below:\n\n1. Open VSCode. You can do this by pressing `Windows+R` and type \"code\" without the quotes and press enter. On Mac, you can press `Command+Space` and type \"code\" without the quotes and press enter.\n\n2. In VSCode, press `Ctrl+Shift+P` (on Windows) or `Command+Shift+P` (on Mac) to open the command palette.\n\n3. Type \"import profile\" without the quotes and press enter.\n\n4. If you hear \"Provide Profile Template URL - Import from Profile Template...\" copy and paste the following URL into the opened input box and press enter.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhttps://insiders.vscode.dev/profile/github/9214db7e3ef2625f774d1301174529de\n```\n:::\n\n\n5. Press `Ctrl+0` (on Windows) or `Command+0` (on Mac) to open the sidebar. You will hear \"data_science_accessible Tree View.\"\n\n6. Press `Ctrl+LeftArrow` (on Windows) or `Command+LeftArrow` (on Mac) to collapse all the opened tree views in the sidebar.\n\n7. Keep all the checkboxes checked and press `Tab` key multiple times until you hear \"Create Profile\" button and press `Enter` key.\n\nTo verify whether the profile is applied correctly, you can check the title bar of VSCode. If you hear \"data science accessible - Visual Studio Code,\" the profile is applied correctly.\n\n\n# RProfile Settings {#sec-rprofile-settings}\n\nAfter configuring VSCode accessibility as described in @sec-vscode-configuration, you need to add the following code to your `Rprofile`. The `Rprofile` is a script that R runs at startup. You can use this script to customize R startup behavior to suit your personal preferences.\n\nI have created an accessible `Rprofile` for your convenience. This `Rprofile` contains a set of options that are useful for screen reader users. To apply this `Rprofile`, folow the steps below:\n\n1. Open VSCode. You can do this by pressing `Windows+R` and type \"code\" without the quotes and press enter. On Mac, you can press `Command+Space` and type \"code\" without the quotes and press enter.\n\n2. In VSCode, press `Ctrl+Shift+P` (on Windows) or `Command+Shift+P` (on Mac) to open the command palette.\n\n3. Type \"create r terminal\" without the quotes and press enter.\n\n4. In the opened R terminal, type the following command and press enter. This will open your `Rprofile` in VSCode.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::edit_r_profile()\n```\n:::\n\n\n5. In the opened `Rprofile`, press `Ctrl+End` (on Windows) or `Command+DownArrow` (on Mac) to move to the end of the file.\n\n6. Copy and paste the following code to the end of the file. Please don't manually copy the code as it is too long. Instead, use the copy button below the code to copy the code. To paste the code into the `Rprofile`, you can press `Ctrl+V` (on Windows) or `Command+V` (on Mac).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Useful option 1\n## Setting text-based interaction instead of R GUI dialog box; especially, useful when choosing CRAN mirror server for package installation.\n## Since R GUI dialog box is not accesible, blind R users tend to pre-define their CRAN mirror server using `chooseCRANmirror(ind = 1)`; however, you can now access the CRAN server list interactively using the following option.\n## Furthermore, when updating R packages, users often encounter inaccessible dialog box asking about whether to also update other dependencies, if any. The following option also resolves that issue by allowing users to choose based on text UI.\noptions(menu.graphics = FALSE)\n\n# Useful option 2\n## Setting pager for your preferable text editor instead of the R internal one which is inaccessible ; especially useful when calling such R functions employing pager option under the hood as `data()` function.\n## For example, if you would like to know what dataset are available under \"ggplot2\" package, you might type in `data(package = \"ggplot2\")`; however, the result viewer displayed in the internal pager is not accessible.\n## If you set your pager option like below, you would be able to check the results in your default editor which is \"notepad.\"\n## This option can be instrumental in other functions using pager option like `reticulate::py_help()`.\noptions(pager = getOption(\"editor\"))\n\n# Useful option 3\n## Playing beep sound per error and use {rlang} style error trace:\noptions(error = function() {\n  rlang::entrace()\n  beepr::beep()\n})\n\n# Useful option 4\n## Turn off unicode for better screen reader readability\noptions(cli.unicode = FALSE)\n\n# Useful option 5\n## Always use RStudio CRAN mirror for downloading packages\noptions(repos = c(CRAN = \"https://cran.rstudio.com\"))\n\n# Useful option 6\n## Give more information about the LaTeX error\noptions(tinytex.verbose = TRUE)\n\n# Specific options for VSCode:\n\n## Use VSCode as the default R editor\noptions(editor = \"code\")\n\n## VSCode R initializer and other options\nif (interactive() && Sys.getenv(\"RSTUDIO\") == \"\") {\n  # Load `init.R` provided by vscode-r extension: This is required to attach any user-custom R terminal\n  source(file.path(Sys.getenv(if (.Platform$OS.type == \"windows\") \"USERPROFILE\" else \"HOME\"), \".vscode-R\", \"init.R\"))\n\n  # Use an external browser for displaying html files, such as {gt} and {xaringan}\n  options(vsc.viewer = FALSE)\n\n  # Use an external browser for web apps, such as {shiny}\n  options(vsc.browser = FALSE)\n\n  # View help page in an external browser\n  options(vsc.helpPanel = FALSE)\n\n  # Use original data viewer (i.e., `utils::View()`)\n  options(vsc.view = FALSE)\n}\n\n## Define code style according to {tidyverse}\noptions(languageserver.formatting_style = function(options) {\n  styler::tidyverse_style(indent_by = 2L)\n})\n\n## Define a more accessible view function\nView <- function(...) {\n  DT::datatable(...)\n}\n```\n:::\n\n\n7. Press `Ctrl+S` (on Windows) or `Command+S` (on Mac) to save the file.\n\n8. Press `Ctrl+W` (on Windows) or `Command+W` (on Mac) to close the file.\n\n9. Close R terminal by pressing `Ctrl+W` (on Windows) or `Command+W` (on Mac). You may be prompted to confirm whether you want to close the terminal. If so, press `Enter` key to confirm.\n\n# Verifying R and VSCode Installation {#sec-verify-installation}\n\nTo verify whether R and VSCode are installed correctly, you can follow the steps below:\n\n1. Open VSCode. You can do this by pressing `Windows+R` and type \"code\" without the quotes and press enter. On Mac, you can press `Command+Space` and type \"code\" without the quotes and press enter.\n\n2. In VSCode, create an untitled file by pressing `Ctrl+N` (on Windows) or `Command+N` (on Mac).\n\n3. In the opened untitled file, type the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Hello world!\")\n```\n:::\n\n\n4. Save this untitled file as \"test.R\" without the quotes. You can save the file by pressing `Ctrl+S` (on Windows) or `Command+S` (on Mac). You will be prompted to enter the file name. If you would like to save the file in a specific path, you can include it in the file name. For example, if you would like to save the file in your C drive, you can type \"C:\\test.R\" without the quotes and hit `Enter`.\n\n5. In order to execute `print(\"Hello world!\")` code, place your cursor on the line where the code is located via `UpArrow` or `DownArrow` keys. \n\n6. You can execute the `print(\"Hello world!\")` code by pressing `Ctrl+Enter` (on Windows) or `Command+Enter` (on Mac). The code will be sent to the R terminal and the result will be displayed in the R terminal.\n\n7. Press `Ctrl+Tab` to switch to the R terminal. You will hear something like \"R Interactive Terminal.\" Your initial focus will be on the R terminal input area where you can type R code. If you press `Shift+Tab` key, the focus moves to the terminal output area where you can read the result of the executed code via standard arrow navigation. If you press `Tab` key, the focus moves back to the R terminal input area. I recommend you keep the focus on the R terminal output area.\n\n8. From R terminal, press `Ctrl+Tab` to go back to the test.R file. You will hear something like \"test dot R.\" Now you can switch between the R terminal and the test.R file back and forth by pressing `Ctrl+Tab` key.\n\n9. In the test.R file, type the following code and execute the code by pressing `Ctrl+Enter` (on Windows) or `Command+Enter` (on Mac).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstop()\n```\n:::\n\n\n10. You will hear chiming sound that indicates an error. If you press `Ctrl+Tab` key, you will hear \"R Interactive Terminal.\" If your last focus was on the R terminal output area, you can navigate the executed code via standard arrow navigation. We intentionally stopped the code execution to test whether the error beep sound is played correctly.\n\n11. Once you have verified all of these steps, you can close R terminal by pressing `Ctrl+W` (on Windows) or `Command+W` (on Mac). You can also close the test.R file by pressing `Ctrl+W` (on Windows) or `Command+W` (on Mac). Close VSCode by pressing `Alt+F4` key on Windows or `Command+Q` key on Mac.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}